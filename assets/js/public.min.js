"use strict";

function Atlas() {
	this.init();
};

Atlas.prototype = {
	init: function init() {
		//console.log('Atlas ok')
	}
};
'use strict';

function Panel() {
	this.init();
};

Panel.prototype = {
	init: function init() {
		var self = this;
		//console.log('Panel ok')
		$(document).ready(function ($) {
			self.login();
			self.enableControls();
		});
	},
	enableControls: function enableControls() {
		var self = this;
		$(document).on('click', '#login-button > a', function (event) {
			event.preventDefault();
			self.login.show(function () {
				setTimeout(function () {
					document.getElementById("username").select();
				}, 10);
			});
			self.login.dom.form.on('submit', function (e) {
				e.preventDefault();
				self.login.submit();
			});
		}).on('click', '#login-close', function (event) {
			self.login.hide();
		});

		$(document).on('keyup', function (e) {
			switch (e.which) {
				case 27:
					// esc
					if (self.login.shown) self.login.hide();
					break;
			}
		});
	},
	login: function login() {
		var self = this;
		self.login.dom = {};
		self.login.dom.modal = $('#login');
		self.login.dom.form = self.login.dom.modal.find('#login-form');
		self.login.show = function (callback) {
			self.login.dom.modal.removeClass('hidden');
			self.login.shown = true;
			if (typeof callback !== 'undefined') {
				callback();
			}
		};
		self.login.hide = function () {
			self.login.dom.modal.addClass('hidden');
			self.login.shown = false;
			self.login.dom.form.find('.alert').text('').addClass('hidden');
		};
		self.login.submit = function () {
			var datas_json = A.formToJson(self.login.dom.form);
			var datas = self.login.dom.form.serialize();
			var url = A.url + '/login' + '?login=true&' + datas;
			console.log(datas);

			$.ajax({
				type: 'POST',
				url: url,
				contentType: 'application/json; charset=utf-8',
				dataType: 'json',
				success: function success(data) {
					console.log(datas_json.target);
					location.href = A.url + '/' + datas_json.target;
				},
				error: function error(data) {
					var response = data.responseText.trim();
					self.login.dom.form.find('.alert').text(response).removeClass('hidden');
				}
			});
		};
	}

};
'use strict';

function Table() {
	this.init();
};

Table.prototype = {
	init: function init() {
		var self = this;
		self.container = $('#zoom-container');
		self.id = self.container.attr('data-id');
		self.btn = {
			'update': null
		};
		self.utils();
		self.enableControls();
		self.enableLoading();
		self.enableImages();
		self.enableVideos();
		self.enableAudios();
	},
	utils: function utils() {
		var self = this;
		self.update = function () {
			//if (self.btn.update !== undefined) self.btn.update.classed('updating', true);
			var datas = {
				'page': A.table.id
			};

			A.ajaxCall('get_table_items', datas, function (data) {

				// version bourrine
				A.zoom.dom.wrapper.html(data);
				//if (self.btn.update !== undefined) self.btn.update.classed('updating', false);
				self.init();
				A.table.editor.items.get();
			});
		};
	},
	enableLoading: function enableLoading() {
		var self = this;
		self.loader = {};
		self.loader.element = $('#loading-screen');
		self.loader.reveal = function () {
			self.loader.element.fadeOut('200', function () {
				$(this).remove();
			});
		};
		setTimeout(function () {
			self.loader.reveal();
		}, 2000);
	},
	enableControls: function enableControls() {
		var self = this;
		$('#logo').on('click', function (e) {
			e.preventDefault();
			var win = A.zoom.utils.getScreen();
			A.zoom.actions.zoomToCoords(win.w / 2, win.h / 2, 1);
		});
		$(document).ready(function () {
			if (A.logged == false) {
				A.zoom.dom.wrapper.selectAll('div.item').on("click", function () {
					A.zoom.actions.setView(d3.select(this));
				});
			}
		});
	},
	enableImages: function enableImages() {
		var self = this;
		self.images = {};
		self.images.items = $('.b-lazy');
		self.images.count = self.images.items.length;
		self.images.counter = 0;
		self.images.bLazy = new Blazy({
			loadInvisible: true,
			container: '#zoom-container',
			success: function success(element) {
				self.images.counter += 1;
				if (self.images.counter >= self.images.count) {
					self.loader.reveal();
				}
				setTimeout(function () {
					var parent = element.parentNode;
					parent.className = parent.className.replace(/\bloading\b/, '');
				}, 200);
			}
		});
		setTimeout(function () {
			self.images.bLazy.load($('.b-lazy'), true);
		}, 300);
		self.images.init = function () {
			self.images.bLazy.revalidate();
		};
	},
	enableVideos: function enableVideos() {
		var self = this;
		self.videos = {};
		self.videos.init = function () {
			var $players = $('#zoom-wrapper').find('.video-player');
			$players.each(function () {
				self.videos.loadSingle($(this));
			});
		};
		self.videos.loadSingle = function ($player) {
			$player.closest('.item').find('.placeholder').remove();
			if ($player.hasClass('youtube')) self.videos.youtube.loadVideo($player.get(0), $player.data('video_id'));
			if ($player.hasClass('vimeo')) self.videos.vimeo.loadVideo($player.get(0), $player.data('video_id'));
		};
		self.videos.youtube = {
			players: {},
			loadVideo: function loadVideo(container, videoId) {
				if (typeof YT == 'undefined' || typeof YT.Player == 'undefined') {
					$.getScript('//www.youtube.com/iframe_api', function () {
						self.videos.youtube.loadPlayer(container, videoId);
					});
				} else {
					self.videos.youtube.loadPlayer(container, videoId);
				}
			},
			loadPlayer: function loadPlayer(container, videoId) {
				var $wrapper = $(container).closest('.iframe-wrapper');
				var $item = $(container).closest('.item');
				var key = $item.data('uniqid');
				self.videos.youtube.players[key] = new YT.Player(container, {
					videoId: videoId,
					width: '100%',
					height: '100%',
					playerVars: {
						disablekb: 1,
						enablejsapi: 1,
						autoplay: 0,
						controls: 0,
						modestbranding: 1,
						rel: 0,
						fs: 0,
						iv_load_policy: 3,
						showInfo: 0,
						autohide: 1
					},
					events: {
						'onReady': function onReady() {
							enableControls();
						},
						'onStateChange': function onStateChange(event) {
							if (event.data == YT.PlayerState.ENDED) {
								$item = $(event.target.a).closest('.item');
								self.videos.youtube.stop($item);
							}
						}
					}
				});

				function enableControls() {
					$wrapper.find('.overlay').on('click', function () {
						if (typeof A.admin !== 'undefined' && A.admin.editmode.enabled === true) return;
						var $item = $(this).closest('.item');
						if ($item.hasClass('playing')) {
							//self.videos.youtube.pause($item)
							self.videos.youtube.stop($item);
						} else {
							self.videos.youtube.play($item);
						}
					});
				}
				self.videos.youtube.play = function ($item) {
					var player = getPlayer($item);
					$item.addClass('playing');
					player.playVideo();
				};
				self.videos.youtube.pause = function ($item) {
					var player = getPlayer($item);
					$item.removeClass('playing');
					player.pauseVideo();
				};
				self.videos.youtube.stop = function ($item) {
					var player = getPlayer($item);
					$item.removeClass('playing');
					player.stopVideo();
				};
				self.videos.youtube.stopAll = function () {
					self.videos.youtube.players.each(function () {
						this.stopVideo();
					});
				};
				var getPlayer = function getPlayer($item) {
					var player = self.videos.youtube.players[$item.data('uniqid')];
					return player;
				};
			}

		};
		self.videos.vimeo = {
			players: {},
			loadVideo: function loadVideo(container, videoId) {
				if (typeof Vimeo == 'undefined' || typeof Vimeo.Player == 'undefined') {
					$.getScript('//player.vimeo.com/api/player.js', function () {
						self.videos.vimeo.loadPlayer(container, videoId);
					});
				} else {
					self.videos.vimeo.loadPlayer(container, videoId);
				}
			},
			loadPlayer: function loadPlayer(container, videoId) {
				var $wrapper = $(container).closest('.iframe-wrapper');
				var $item = $(container).closest('.item');
				var key = $item.data('uniqid');
				self.videos.vimeo.players[key] = new Vimeo.Player(container, {
					id: videoId,
					width: '100%',
					height: '100%',
					title: false,
					autopause: false
				});

				// enableControls
				self.videos.vimeo.players[key].on('loaded', function () {
					$wrapper.find('.overlay').on('click', function () {
						if (typeof A.admin !== 'undefined' && A.admin.editmode.enabled === true) return;
						var $item = $(this).closest('.item');
						if ($item.hasClass('playing')) {
							//self.videos.vimeo.pause($item)
							self.videos.vimeo.stop($item);
						} else {
							self.videos.vimeo.play($item);
						}
					});
				});
				self.videos.vimeo.players[key].on('ended', function () {
					var $item = $(this.element).closest('.item');
					self.videos.vimeo.stop($item);
				});

				self.videos.vimeo.play = function ($item) {
					var player = getPlayer($item);
					$item.addClass('playing');
					player.play();
				};
				self.videos.vimeo.pause = function ($item) {
					var player = getPlayer($item);
					$item.removeClass('playing');
					player.pause();
				};
				self.videos.vimeo.stop = function ($item) {
					var player = getPlayer($item);
					$item.removeClass('playing');
					player.unload();
				};
				self.videos.vimeo.stopAll = function () {
					self.videos.vimeo.players.each(function () {
						this.unload();
					});
				};
				var getPlayer = function getPlayer($item) {
					var player = self.videos.vimeo.players[$item.data('uniqid')];
					return player;
				};
			}
		};

		self.videos.init();
	},
	enableAudios: function enableAudios() {
		var self = this;
		self.audios = {};
		self.audios.init = function () {
			self.audios.items = $('#zoom-wrapper').find('div.item.audio');
			self.audios.items.find('audio').on('ended', function () {
				self.audios.pause($(this).closest('.item'));
			});
			self.audios.items.on('click', function () {
				if (typeof A.admin !== 'undefined' && A.admin.editmode.enabled === true) return;
				if ($(this).hasClass('playing')) {
					self.audios.pause($(this));
				} else {
					self.audios.play($(this));
				}
			});
		};
		self.audios.init();

		self.audios.play = function ($item) {
			$item.addClass('playing');
			$item.find('audio').get(0).play();
		};
		self.audios.pause = function ($item) {
			$item.removeClass('playing');
			$item.find('audio').get(0).pause();
		};
		self.audios.stop = function ($item) {
			self.audios.pause($item);
			$item.find('audio').get(0).currentTime = 0;
		};
		self.audios.stopAll = function () {
			self.audios.items.each(function () {
				if ($(this).hasClass('playing')) {
					self.audios.stop($(this));
				};
			});
		};
	}

};
'use strict';

function Zoom(wrapper) {

	this.init();
};
Zoom.prototype = {

	destroy: function destroy() {
		// delete events listeners
	},
	init: function init() {
		var self = this;

		self.logged = $('body').hasClass('logged');
		self.utils();
		self.actions();

		self.params = {};
		self.params.scale = {
			initial: 1.4,
			minlimit: .6,
			maxlimit: 3, // stop rasterizing limit	
			min: .1,
			max: 3
		};
		self.params.zoom = {
			initial: self.utils.getZoom(self.params.scale.initial),
			min: self.utils.getZoom(self.params.scale.min),
			max: self.utils.getZoom(self.params.scale.max)
		};
		self.pos = {
			x: 0,
			y: 0,
			z: self.params.scale.initial
		};
		self.behavior = d3.zoom().scaleExtent([self.params.scale.min, self.params.scale.max]);

		self.launch = function () {
			self.dom = {};
			self.dom.container = d3.select("#zoom-container").call(self.behavior);
			self.dom.wrapper = self.dom.container.select("#zoom-wrapper");

			self.dom.slider = $('input#zoom-slider').attr("value", self.params.zoom.initial).attr("min", self.params.zoom.min).attr("max", self.params.zoom.max).attr("step", (self.params.zoom.max - self.params.zoom.min) / 100).rangeslider({
				polyfill: false
			}).on('input', function (e) {
				self.actions.slide(this.value);
			});

			self.behavior.on("start", function () {
				self.actions.start();
			}).on('zoom', function () {
				self.actions.zoom();
			}).on("end", function () {
				self.actions.end();
			});

			var win = self.utils.getScreen();
			self.actions.zoomToCoords(win.w / 2, win.h / 2, self.params.scale.initial, 200);

			self.enableKeyboard();
			self.enabled = true;
		};
		self.launch();
	},
	actions: function actions() {
		var self = this;
		self.actions.disableDrag = function () {
			self.dom.container.on("mousedown.zoom", null).on("touchstart.zoom", null).on("touchmove.zoom", null).on("touchend.zoom", null);
		};
		self.actions.reset = function () {
			self.dom.container.call(self.behavior);
		};
		self.actions.slide = function (zoomvalue) {
			self.behavior.scaleTo(self.dom.container, self.utils.getScale(zoomvalue));
		};
		self.actions.zoom = function (e) {
			self.utils.getPos();
			var current = self.pos.z + 1,
			    start = .5,
			    addition = 4,
			    end = self.params.scale.max;
			var easing = self.utils.easeInOut(current, start, addition, end);
			self.ratio = 1 / self.pos.z * easing * 500;

			self.logged = $('body[logged]').length ? true : false;
			var styles = 'transform:translate(' + self.pos.x + 'px, ' + self.pos.y + 'px) scale(' + self.pos.z + ');';
			if (self.logged) {
				styles += ' font-size:' + self.ratio + 'px;';
			};

			self.dom.wrapper.attr("style", styles);
			self.dom.wrapper.attr('data-x', self.pos.x).attr('data-y', self.pos.y).attr('data-z', self.pos.z);
			self.dom.slider.val(self.utils.getZoom(self.pos.z)).rangeslider('update', true, false);

			//if (self.pos.z <= self.params.scale.minlimit) { self.dom.wrapper.classed("optimiseSpeed", true) } else { self.dom.wrapper.classed("optimiseSpeed", false) }

			/*
   if ((self.pos.z == self.params.scale.min) == true || (self.pos.z == self.params.scale.max) == true || 
   	(self.pos.z >= self.params.scale.maxlimit) ) { self.dom.wrapper.classed("zooming", false);}
   */

			if (self.callback && typeof self.callback !== "undefined") self.callback();
		};
		self.actions.start = function () {
			//if (self.pos.z <= self.params.scale.maxlimit) self.dom.wrapper.classed("zooming", true); 
		};
		self.actions.end = function () {
			//self.dom.wrapper.classed("zooming", false); 
		};
		self.actions.scaleBy = function (num) {
			num = self.utils.getScale(self.utils.getZoom(self.pos.z) + num);
			self.behavior.scaleTo(self.dom.container.transition().duration(300), num);
		};
		self.actions.zoomToCoords = function (x, y, z) {
			var animation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

			if (animation) {
				if (animation === true) animation = 1000;
				self.dom.container.transition().duration(animation).call(self.behavior.transform, d3.zoomIdentity.translate(x, y).scale(z));
			} else {
				self.dom.container.call(self.behavior.transform, d3.zoomIdentity.translate(x, y).scale(z));
			}
		};
		self.actions.setView = function (item) {
			if (item.classed('audio') || item.classed('video:not(.playing)') || item.classed('arrow')) {
				return;
			}
			var win = self.utils.getScreen();
			var coords = {};
			coords['w'] = parseFloat(item.style('width'));
			coords['h'] = parseFloat(item.style('height'));
			coords['x'] = parseFloat(item.style('left')) + coords.w / 2;
			coords['y'] = parseFloat(item.style('top')) + coords.h / 2;

			var scale = Math.max(self.params.scale.min, Math.min(self.params.scale.max, 0.9 / Math.max(coords.w / win.w, coords.h / win.h)));
			var translate = [win.w / 2 - scale * coords.x, win.h / 2 - scale * coords.y];

			self.dom.container.transition().ease(d3.easeSinInOut).duration(1000).call(self.behavior.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));
		};

		function centerTable() {}

		// center on resize
		var timeout,
		    resized = false,
		    initial,
		    current;
		$(window).off().on('resize', function () {
			if (!resized) {
				initial = self.utils.getScreen();
				resized = true;
			};
			clearTimeout(timeout);
			timeout = setTimeout(function () {
				current = self.utils.getScreen();
				var move = {
					x: (current.w - initial.w) / 2 / self.pos.z,
					y: (current.h - initial.h) / 2 / self.pos.z
				};
				self.behavior.translateBy(self.dom.container, move.x, move.y);
				resized = false;
			}, 100);
		});
	},
	utils: function utils() {
		var self = this;
		self.utils.getScale = function (z) {
			// zoom to scale
			return Math.pow(2, z - 1);
		};
		self.utils.getZoom = function (s) {
			// scale to zoom
			return Math.log(s) / Math.log(2) + 1;
		};
		self.utils.getPos = function () {
			var shorten = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

			self.pos = { x: d3.event.transform.x, y: d3.event.transform.y, z: d3.event.transform.k };
			return self.pos;
		};
		self.utils.getScreen = function () {
			return { w: $(window).width(), h: $(window).height() };
		};
		self.utils.getCenter = function () {
			// centre of the screen
			var screen = self.utils.getScreen();
			return { 'x': screen.w / 2, 'y': screen.h / 2 };
		};
		self.utils.easeInOut = function (t, b, c, d) {
			// t : current time, b : begining - debut, c : change - fin, d : duration
			return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
		};
		self.utils.screenToTable = function (x, y) {
			return {
				x: (x - self.pos.x) / self.pos.z,
				y: (y - self.pos.y) / self.pos.z
			};
		};
		self.utils.screenToTableSquare = function (x, y, w, h) {
			var coords = {
				x: (x - self.pos.x) / self.pos.z,
				y: (y - self.pos.y) / self.pos.z,
				w: w / self.pos.z,
				h: h / self.pos.z
			};
			return coords;
		};
	},
	enableKeyboard: function enableKeyboard() {
		$(document).on('keydown', function (e) {
			switch (e.which) {
				case '+':
				case '=':
				case 187:
					if (e.ctrlKey || e.metaKey) {
						e.preventDefault();
						A.zoom.actions.scaleBy(1);
					}
					break;
				case '-':
				case 189:
					if (e.ctrlKey || e.metaKey) {
						e.preventDefault();
						A.zoom.actions.scaleBy(-1);
					}
					break;
			}
		});
	}

};
'use strict';

var A;
$(document).ready(function () {

	var logo = d3.select('.logo'),
	    infobutton = d3.select('#info-button');
	logo.on("mouseenter click", function () {
		skeww(logo.select('img'));
	});

	infobutton.on("mouseenter click", function () {
		skeww(infobutton.select('img'));
	});

	function skeww(item) {
		item.transition().duration(600).attr("style", "transform:skewX(" + getRand(-50, 40) + "deg);");
	}
	function getRand(min, max) {
		var num = Math.random() * (max * 2) + min;
		return num;
	}

	/*===================================
 =            INFO PANEL            =
 ===================================*/

	if ($('#info-button').length) {

		var edito = {
			dom: $('#edito'),
			menu: $("#sticky-sidebar"),
			menuitems: $("#sticky-sidebar").find("a.scroll"),
			btn: {
				open: $('#info-button')
			},
			opened: false,
			menuclicked: false,
			open: function open() {
				this.dom.removeClass('hidden');
				this.opened = true;
				this.sticky = new Waypoint.Sticky({
					element: this.menu[0],
					context: this.dom
				});
				this.scroll(edito.dom[0]);
			},
			close: function close() {
				this.dom.addClass('hidden');
				this.opened = false;
				this.sticky.destroy();
			},
			topOffset: $(window).height() / 6,
			scrollItems: function scrollItems() {
				edito.menuitems.map(function () {
					var item = $($(this).attr("href"));
					if (item.length) {
						return item;
					}
				});
			},
			scroll: function scroll(target) {
				var self = this;
				if (self.opened == false) {
					return;
				}
				if (self.menuclicked == false) {
					var cur = self.scrollItems.map(function () {
						if ($(this).offset().top < self.topOffset) {
							return this;
						}
					});
					// Get the id of the current element
					cur = cur[cur.length - 1];
					var id = cur && cur.length ? cur[0].id : "";
					// Set/remove active class
					edito.menuitems.parent().removeClass("active").end().filter("[href='#" + id + "']").parent().addClass("active");
				}
			},
			scrollTo: function scrollTo(target) {
				var self = this;
				this.menuclicked = true;
				//calculate destination place
				var dest = $(target.hash).position().top + 25;
				edito.menuitems.parent().removeClass("active");
				$(target).parent().addClass('active');

				//go to destination
				edito.dom.animate({
					scrollTop: dest
				}, 500, 'swing', function () {
					self.menuclicked = false;
				});
			}
		};
		edito.scrollItems = edito.menuitems.map(function () {
			var item = $($(this).attr("href"));
			if (item.length) {
				return item;
			}
		});

		var throttled = false;
		window.addEventListener('resize', function () {
			if (!throttled) {

				edito.topOffset = $(window).height() / 6;

				throttled = true;
				setTimeout(function () {
					throttled = false;
				}, 100);
			}
		});

		edito.menu.on("click touchend", 'a.scroll', function (event) {
			event.preventDefault();
			edito.scrollTo(this);
		});

		// Bind to scroll
		edito.dom.on('scroll', function () {
			edito.scroll(this);
		});

		edito.btn.open.on('click', function () {
			edito.open();
		});
		edito.dom.on('click', '.cross, .clickable-bg', function () {
			edito.close();
		});
		// on load
		if (edito.dom.hasClass('hidden') == false) {
			edito.open();
		}
	}

	A = new Archipels();
});

function Archipels() {
	this.init();
};
Archipels.prototype = {
	init: function init() {
		var self = this;

		self.utils();
		self.url = rootUrl;
		self.panel = new Panel();
		self.logged = false;

		if (document.getElementById('zoom-container')) {
			self.zoom = new Zoom();
			if (self.zoom.dom.container.classed('table')) {
				self.table = new Table();
			}
			if (self.zoom.dom.container.classed('atlas')) {
				self.atlas = new Atlas();
			}
		}

		$(document).ready(function () {
			//console.log('ready');
			// tooltips
			$('[data-toggle="tooltip"]').each(function () {
				var placement = $(this).data('placement') ? $(this).data('placement') : 'auto';
				$(this).tooltip({
					delay: { "show": 500, "hide": 100 },
					placement: placement,
					viewport: { selector: 'body', padding: 4 },
					trigger: 'hover'
				});
			});
		});
	},
	utils: function utils() {
		var self = this;
		self.ajaxCall = function (request, datas, callback) {
			if (typeof datas == 'undefined') {
				datas = '';
			};
			$.ajax({
				type: 'POST',
				url: self.url + '/ajax', // attention à l'url!!!
				contentType: 'application/json; charset=utf-8',
				dataType: 'json',
				data: { request: request, datas: datas },
				success: function success(data) {
					if (typeof callback != 'undefined') callback(data);
				},
				error: function error(data) {
					//console.log(data);
				}
			});
		};
		self.formToJson = function (form) {
			var o = {};
			var a = form.serializeArray();
			$.each(a, function () {
				if (o[this.name] !== undefined) {
					if (!o[this.name].push) {
						o[this.name] = [o[this.name]];
					}
					o[this.name].push(this.value || '');
				} else {
					o[this.name] = this.value || '';
				}
			});
			return o;
		};
	}

};