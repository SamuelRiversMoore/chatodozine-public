'use strict';

// general functions and initialisation

function Admin() {
	this.init();
};

Admin.prototype = {

	init: function init() {
		var self = this;
		if (typeof A !== 'undefined') {
			if (typeof A.table !== 'undefined') {
				A.table.medias = new Medias();
				A.table.editor = new Editor();
				A.table.outils = new Outils();
				self.enableEditmode();
				self.enableKeyboard();
			}
			if (typeof A.atlas !== 'undefined') {}
		}
		//console.log('Admin ok');
	},
	utils: {
		getAbsolutePosition: function getAbsolutePosition(el) {
			var doc = document,
			    win = window,
			    body = doc.body,


			// pageXOffset and pageYOffset work everywhere except IE <9.
			offsetX = win.pageXOffset !== undefined ? win.pageXOffset : (doc.documentElement || body.parentNode || body).scrollLeft,
			    offsetY = win.pageYOffset !== undefined ? win.pageYOffset : (doc.documentElement || body.parentNode || body).scrollTop,
			    rect = el.getBoundingClientRect();

			if (el !== body) {
				var parent = el.parentNode;

				// The element's rect will be affected by the scroll positions of
				// *all* of its scrollable parents, not just the window, so we have
				// to walk up the tree and collect every scroll offset. Good times.
				while (parent !== body) {
					offsetX += parent.scrollLeft;
					offsetY += parent.scrollTop;
					parent = parent.parentNode;
				}
			}

			return {
				bottom: rect.bottom + offsetY,
				height: rect.height,
				left: rect.left + offsetX,
				right: rect.right + offsetX,
				top: rect.top + offsetY,
				width: rect.width
			};
		},
		getParent: function getParent(el, selector) {
			if ($(el).is(selector)) {
				return el;
			} else {
				var parent = el.parentNode;
				while ($(parent).is(selector) == false && parent !== document.body) {
					parent = parent.parentNode;
				}
				return parent;
			}
		},
		showButtons: function showButtons() {
			A.table.medias.btn.open.classed('hidden', false);
			$.each(A.table.outils.btn, function () {
				this.classed('hidden', false);
			});
		},
		hideButtons: function hideButtons() {
			A.table.medias.btn.open.classed('hidden', true);
			$.each(A.table.outils.btn, function () {
				this.classed('hidden', true);
			});
		}
	},
	enableEditmode: function enableEditmode() {
		var self = this;
		self.editmode = {
			btn: {
				enable: d3.select("#edit-mode-toggle")
			}
		};
		self.editmode.init = function () {
			if (self.editmode.btn.enable.property('checked') == true) {
				self.editmode.enable();
			} else {
				self.editmode.disable();
			}
			self.editmode.btn.enable.on('change', function () {
				if (self.editmode.enabled == true) {
					self.editmode.disable();
				} else {
					self.editmode.enable();
				}
			});
		};
		self.editmode.enable = function () {
			self.utils.showButtons();
			A.zoom.dom.container.on("dblclick.zoom", null);
			self.editmode.enabled = true;
			A.table.audios.stopAll();
			self.editmode.btn.enable.property('checked', true);
		};
		self.editmode.disable = function () {
			self.utils.hideButtons();
			A.zoom.actions.reset();
			self.editmode.enabled = false;
			self.editmode.btn.enable.property('checked', false);
			A.table.editor.dom.items.classed('hovered', false);
		};
		self.editmode.init();
	},
	enableKeyboard: function enableKeyboard() {
		var editor = A.table.editor;
		var medias = A.table.medias;
		function isText() {
			return ['TEXTAREA'].indexOf(document.activeElement.tagName) > -1 ? 1 : 0;
		};
		function isInput() {
			return ['INPUT'].indexOf(document.activeElement.tagName) > -1 ? 1 : 0;
		};
		function isAny() {
			return isInput() || isText() ? 1 : 0;
		};
		function shiftKeyMultiply(e) {
			if (e.shiftKey && e.type == 'keydown') {
				var attrVal = document.activeElement.getAttribute("data-step");
				if (attrVal) document.activeElement.setAttribute("step", attrVal * 10);
			} else {
				var attrVal = document.activeElement.getAttribute("data-step");
				if (attrVal) document.activeElement.setAttribute("step", attrVal);
			}
		}

		$(document).on('keydown', function (e) {
			switch (e.which) {
				case 13:
					// enter
					if (isInput()) {
						e.preventDefault();break;
					}
					if (medias.fileReady) {
						e.preventDefault();
						medias.upload();
						break;
					}
					break;
				case 16:
					// shift
					if (isInput()) {
						shiftKeyMultiply(e);break;
					}
					if (editor.items.selected) editor.shiftKeyPressed = true;
					break;
				case 38:
					// top
					if (isAny()) {
						break;
					}
					if (editor.items.selected) {
						var move = { 'x': 0, 'y': -1 };
						editor.ux.moveItem(editor.items.selected, move);
					}
					break;
				case 37:
					// left
					if (isAny()) {
						break;
					}
					if (editor.items.selected) {
						var move = { 'x': -1, 'y': 0 };
						editor.ux.moveItem(editor.items.selected, move);
					}
					break;
				case 40:
					// bottom
					if (isAny()) {
						break;
					}
					if (editor.items.selected) {
						var move = { 'x': 0, 'y': 1 };
						editor.ux.moveItem(editor.items.selected, move);
					}
					break;
				case 39:
					// right
					if (isAny()) {
						break;
					}
					if (editor.items.selected) {
						var move = { 'x': 1, 'y': 0 };
						editor.ux.moveItem(editor.items.selected, move);
					}
					break;
				case 83:
					// s
					if (e.ctrlKey || e.metaKey) {
						if (editor.items.selected) {
							e.preventDefault();
							editor.changes.save();
							editor.items.unselect();
							break;
						}
					}
					break;
				case 67:
					// c
					if (e.ctrlKey || e.metaKey) {
						if (isAny()) {
							break;
						}
						if (editor.items.selected) {
							editor.items.copy();
							e.preventDefault();
							break;
						}
					}
					break;
				case 86:
					// v
					if (e.ctrlKey || e.metaKey) {
						if (isAny()) {
							break;
						}
						if (editor.items.selected) {
							editor.items.paste();
							e.preventDefault();
							break;
						}
					}
					break;
				case 68:
					// d
					if (e.ctrlKey || e.metaKey) {
						if (editor.items.selected) {
							editor.items.duplicate();
							e.preventDefault();
							break;
						}
					}
					break;
				case 90:
					// z
					if (e.ctrlKey || e.metaKey) {
						if (editor.items.selected) {
							editor.changes.restore();
							break;
						}
						if (editor.items.clicked) {
							editor.items.unclick();
							break;
						}
					}
					break;
			}
		}).on('keyup', function (e) {
			switch (e.which) {
				case 16:
					// shift
					if (isInput()) {
						shiftKeyMultiply(e);break;
					}
					if (editor.items.selected) editor.shiftKeyPressed = false;
					break;

				case 27:
					// esc
					if (isAny()) {
						break;
					}
					if (A.table.outils.selection && A.table.outils.selection.exists) {
						A.table.outils.selection.remove();break;
					}
					if (A.table.outils.text.enabled) {
						A.table.outils.text.disable();break;
					}
					if (editor.items.selected) {
						editor.changes.restore();
						break;
					}
					if (editor.items.clicked) {
						editor.items.unclick();
						break;
					}
					if (medias.enabled) {
						medias.disable();
						break;
					}
					if (A.admin.editmode.enabled) {
						A.admin.editmode.disable();
						break;
					}
					if (A.admin.editmode.enabled == false) {
						A.admin.editmode.enable();
						break;
					}
					break;
				case 13:
					// enter
					if (isText()) {
						e.preventDefault();break;
					}
					if (medias.modalOpen) {
						medias.modalOpen.find('button[type="submit"]').click();
						break;
					}
					if (editor.items.selected) {
						editor.changes.save();
						editor.items.unselect();
						break;
					}
					if (editor.items.clicked) {
						editor.items.unclick();
						break;
					}
					break;
				case 8:
					// delete
					if (isAny()) {
						break;
					}
					if (editor.items.clicked) {
						e.preventDefault();
						editor.items.remove();
					}
					break;
			}
		});
	}

};
"use strict";

function Editor() {
	this.init();
};

Editor.prototype = {

	init: function init() {
		var self = this;

		A.ajaxCall('get_items_templates', null, function (data) {
			self.templates = data;
		});

		self.dom = {
			thumb: d3.select("#draggable-thumb")
		};
		self.btn = {};

		// table params
		//A.table.btn.update = d3.select('#table-update');
		//A.table.btn.update.on('click', A.table.update)

		// params
		self.items.selected = null;
		self.shiftKeyPressed = false;

		self.enableFiches();
		self.enableControls();
		self.changes();
		self.items();

		//console.log('Editor ok');
	},
	enableControls: function enableControls() {
		var self = this;

		// enable ux
		self.ux();

		A.zoom.dom.container.on("touchstart", function () {
			d3.event.preventDefault();
		}).on("touchmove", function () {
			d3.event.preventDefault();
		}).on('click', function () {
			if (self.changes.hasChanged == false) {
				self.items.unselect();
			}
		});

		self.enableIndexButtons = function () {
			self.btn.index.select('button.increase').on('click', function () {
				if (self.items.selected) {
					self.setIndex(self.items.selected, 1);
				}
			});

			self.btn.index.select('button.decrease').on('click', function () {
				if (self.items.selected) {
					self.setIndex(self.items.selected, -1);
				}
			});

			self.setIndex = function ($element, modif) {
				self.changes.storeOriginal($element.node(), false);
				var index = parseInt(self.items.selected.style('z-index'));
				if (isNaN(index)) {
					index = 0;
				}
				$element.style('z-index', index + modif);
				self.changes.storeState($element.node());
			};
		};
	},
	enableFiches: function enableFiches() {
		var self = this;
		self.fiches = {};
		self.fiches.open = function (target) {
			self.fiches.opened = self.fiches[target];
			self.fiches.opened.open();
			A.admin.utils.hideButtons();
		};
		self.fiches.close = function () {
			if (self.fiches.opened) {
				A.admin.utils.showButtons();
				self.fiches.opened.close();
				self.fiches.opened = null;
			}
		};
		self.fiches.refresh = function () {
			if (self.fiches.opened) {
				self.fiches.opened.refresh();
			}
		};
	},
	items: function items() {
		var self = this;
		self.items.get = function () {
			self.dom.items = A.zoom.dom.wrapper.selectAll('div.item').on("mouseenter", function () {
				self.ux.hover(this, 'enter');
			}).on("mouseleave", function () {
				self.ux.hover(this, 'leave');
			}).on("click", function () {
				self.ux.click(this);
			});
		};
		self.items.select = function ($item) {
			if (A.admin.editmode.enabled !== true) return;
			if (self.items.selected && self.items.selected !== $item) {
				self.items.unselect();
			}
			if (self.items.selected === null || self.items.selected !== $item) {
				self.btn.edit.classed('hidden', true);
				self.btn.cancel.classed('hidden', false);
				self.btn.index.classed('hidden', false);

				self.items.selected = $item;
				A.zoom.dom.wrapper.classed("ghostly", true);
				if (self.items.selected.classed('arrow') == true) {
					A.table.outils.arrow.select(self.items.selected);
				} else {
					var $selected = self.items.selected.classed("selected", true).call(self.behaviour.drag);
					self.elemRatio = parseInt($selected.style('width')) / parseInt($selected.style('height'));
					$selected.selectAll('.bar').call(self.behaviour.frame);
					$selected.selectAll('.spot').call(self.behaviour.spot);
					$selected.selectAll('.handle').call(self.behaviour.resize);
					if ($selected.classed('text') == true) {
						$selected.selectAll('.handle').on('dblclick', function () {
							var direction = $(this).hasClass('top') ? 'bottom' : 'top';
							self.ux.adjust_to_text_content($selected, direction);
						});
					}
				}

				self.fiches.refresh();

				if (self.items.new == null) {
					// enable remove Button
					self.btn.remove.on('click', function () {
						d3.event.stopPropagation();
						self.items.remove();
					});
				}
				self.btn.cancel.on('click', function () {
					self.changes.restore();
				});
				self.btn.save.on('click', function () {
					self.changes.save();
					self.items.unselect();
				});
				self.btn.ctrls.classed('hidden', false);
			}
		};
		self.items.unselect = function () {
			self.items.unclick();
			if (self.items.selected) {
				if (self.items.selected.classed('arrow')) {
					A.table.outils.arrow.removePoints();
				}
				A.zoom.dom.wrapper.classed("ghostly", false);
				self.items.selected.classed('selected', false);
				self.items.selected.on(".drag", null); // total unbind
				self.items.selected = null;
			}
		};
		self.items.click = function ($item) {
			if (A.admin.editmode.enabled !== true) {
				A.zoom.actions.setView($item);
				return;
			}
			if (self.items.selected === null) {
				if (self.items.clicked && self.items.clicked != $item) {
					self.items.unclick();
				}
				if (self.items.clicked === null || self.items.clicked !== $item) {
					self.items.clicked = $item;
					self.fiches.open(self.items.clicked.attr('data-fiche'));
					var fiche = self.fiches.opened.dom;
					self.btn = {
						edit: fiche.select(".edit-button"),
						remove: fiche.select(".remove-button"),
						save: fiche.select(".save-button"),
						cancel: fiche.select(".cancel-button"),
						index: fiche.select(".index-buttons"),
						ctrls: fiche.select(".fiche-controls")
					};
					A.zoom.dom.wrapper.classed("transparently", true);
					self.items.clicked.classed('clicked', true);
					self.enableIndexButtons();

					// enable edit Button
					self.btn.edit.classed('hidden', false);
					self.btn.edit.on('click', function () {
						d3.event.stopPropagation();
						self.items.select(self.items.clicked);
					});
					self.items.clicked.on('click', function (e) {
						d3.event.stopPropagation();
						self.items.select(self.items.clicked);
					});
				}
			}
		};
		self.items.unclick = function () {
			if (self.items.clicked) {
				// to do : enable double click
				A.zoom.dom.wrapper.classed("transparently", false);
				self.fiches.close();
				self.dom.items.classed("clicked", false);
				self.btn.ctrls.classed('hidden', true);
				self.btn.remove.on("click", null);
				self.btn.edit.classed('hidden', true);
				self.btn.edit.on("click", null);
				self.items.clicked.on("click", null);
				self.items.clicked = null;
				self.items.get();
			}
		};
		self.items.remove = function () {
			if (A.admin.editmode.enabled !== true) return;
			var target = self.items.clicked;
			if (target) {
				var call = 'remove_item';
				var element = target.attr('data-elem');
				var uniqid = target.attr('data-uniqid');
				var datas = {
					'page': A.table.id,
					'element': element,
					'uniqid': uniqid,
					'field': target.classed('note') ? 'notes' : 'items'
				};
				var callback = function callback(data) {
					target.remove();
					if (target.classed('arrow')) A.table.outils.arrow.removePoints();
					self.items.unselect();
					self.changes.reset();
				};
				if (uniqid) {
					A.ajaxCall(call, datas, callback);
				} else {
					callback();
				}
			}
		};
		self.items.clip = null;
		self.items.copy = function () {
			if (self.items.selected) {
				self.items.clip = {
					dom: $(self.items.selected.node()).clone().attr('style', '').attr('data-uniqid', ''),
					w: parseFloat(self.items.selected.style('width')),
					h: parseFloat(self.items.selected.style('height'))
				};
			}
		};
		self.items.paste = function () {
			var callback = function callback() {
				self.items.unselect();
				var item = self.items.clip;
				var center = A.zoom.utils.getCenter();
				var coords = {
					x: center.x - item.w * A.zoom.pos.z / 2,
					y: center.y - item.h * A.zoom.pos.z / 2,
					w: item.w * A.zoom.pos.z,
					h: item.h * A.zoom.pos.z
				};
				self.ux.item_to_table(item.dom, coords);
			};
			self.changes.save(callback);
			//self.items.clipboard = null;
		};
		self.items.duplicate = function () {
			var drag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

			self.items.copy();
			self.items.paste();
		};
		// init
		self.items.new = null;
		self.items.get();
	},

	// Fonction pour sauvegarder des changements sur la table (uniquement)
	changes: function changes() {
		var self = this;
		self.changes.buffer = null;
		self.changes.hasChanged = false;
		self.changes.storeOriginal = function ($this, storage) {
			self.changes.target = $this;
			if (typeof storage === 'undefined') {
				storage = true;
			}
			if (storage == true) {
				if (self.changes.hasChanged == false) {
					self.changes.original = $this.cloneNode(true);
					self.changes.original.className = self.changes.original.className.replace('hovered', '').replace('clicked', '').replace('selected', '');
				}
			} else {
				self.changes.original = null;
			}
		};
		self.changes.storeState = function ($this) {
			self.changes.buffer = $this.cloneNode(true);
			self.changes.buffer.className = self.changes.buffer.className.replace('hovered', '').replace('clicked', '').replace('selected', '');
			if ($(self.changes.original).prop('outerHTML') !== $(self.changes.buffer).prop('outerHTML')) {
				self.changes.hasChanged = true;
				self.btn.save.classed('hidden', false);
			}
		};
		self.changes.restore = function () {
			if (self.items.new) {
				self.items.remove(self.items.clicked);
			} else {
				self.btn.save.classed('hidden', true);
				if (self.changes.target) {
					$(self.changes.target).replaceWith($(self.changes.original));
				}
				self.changes.reset();
				self.items.unselect();
			}
		};
		self.changes.save = function (savecallback) {
			if (self.changes.hasChanged == true) {
				var $wrapper = $(self.changes.buffer);
				var data = {
					'uniqid': $wrapper.data('uniqid'),
					'wrapleft': parseFloat($wrapper.css('left')),
					'wraptop': parseFloat($wrapper.css('top')),
					'wrapheight': parseFloat($wrapper.css('height')),
					'wrapwidth': parseFloat($wrapper.css('width')),
					'zindex': isNaN(parseInt($wrapper.css('z-index'))) ? 0 : parseInt($wrapper.css('z-index')),
					'index': 0
				};
				var $content = $wrapper.find('.hold');
				if ($content.length) {
					data['itemleft'] = parseFloat($content.css('left'));
					data['itemtop'] = parseFloat($content.css('top'));
					data['itemheight'] = parseFloat($content.css('height'));
					data['itemwidth'] = parseFloat($content.css('width'));
				}

				if ($wrapper.hasClass('note')) {
					if ($wrapper.hasClass('text')) {
						data['type'] = 'text';
						var formData = self.fiches.text.getFormData();
						$.each(formData, function (key, value) {
							data[key] = value;
						});
					}
					if ($wrapper.hasClass('arrow')) {
						data['type'] = 'arrow';
						data['transform'] = $wrapper.get(0).style.transform;
					}
				}
				var datas = {
					'page': A.table.id,
					'element': $wrapper.data('elem'),
					'data': data,
					'field': $wrapper.hasClass('note') ? 'notes' : 'items'
				};

				if ($wrapper.data('uniqid')) {
					var call = 'update_item';
					var callback = function callback(data) {
						self.changes.reset();
						if ($wrapper.hasClass('arrow')) A.table.outils.arrow.removePoints();
						if (typeof savecallback != "undefined") savecallback();
					};
				} else {
					if (self.items.new) {
						var call = 'create_item';
						var target = self.changes.target;
						var callback = function callback(data) {
							if ('uniqid' in data) {
								var $item = $(self.changes.target);
								self.changes.target.setAttribute('data-uniqid', data['uniqid']);
								if ($item.hasClass('audio')) A.table.audios.init();
								if ($item.hasClass('video')) A.table.videos.loadSingle($item.find('.video-player'));
								if ($item.hasClass('arrow')) A.table.outils.arrow.removePoints();
							}
							self.changes.reset();
							if (typeof savecallback != "undefined") savecallback();
						};
					}
				}
				A.ajaxCall(call, datas, callback);
			} else {
				if (typeof savecallback != "undefined") savecallback();
			}
		};
		self.changes.reset = function () {
			self.btn.save.classed('hidden', true);
			self.btn.cancel.classed('hidden', true);
			self.changes.hasChanged = false;
			self.changes.target = null;
			self.changes.original = null;
			self.items.new = null;
			self.items.get();
		};
	},

	/*----------	INTERACTION	----------*/

	ux: function ux() {
		var self = this;

		// liste les items et load le listener
		self.behaviour = {};
		self.behaviour.drag = d3.drag().on("start drag end", function () {
			self.ux.drag(this);
		});
		self.behaviour.resize = d3.drag().on("start drag end", function () {
			self.ux.resize(this);
		});
		self.behaviour.spot = d3.drag().on("start drag end", function () {
			self.ux.spot(this);
		});
		self.behaviour.frame = d3.drag().on("start drag end", function () {
			self.ux.frame(this);
		});

		self.ux.hover = function ($this, action) {
			if (A.admin.editmode.enabled !== true) return;
			if (A.table.outils.text.enabled === true) return;
			if (A.table.outils.arrow.enabled === true) return;
			if (self.items.selected === null && d3.select($this).classed('clicked') == false) {
				if (action == 'enter') {
					if (self.hovered) {
						self.hovered.classed('hovered', false);self.hovered = null;
					}
					if (self.items.clicked !== d3.select($this)) {
						self.hovered = d3.select($this).classed('hovered', true);
					}
				}
				if (action == 'leave') {
					if (self.hovered) {
						self.hovered.classed('hovered', false);self.hovered = null;
					}
				}
			}
		};

		self.ux.click = function ($this) {
			self.ux.hover($this, 'leave');
			d3.event.stopPropagation();
			if (d3.event.defaultPrevented) return; // dragged
			self.items.click(d3.select($this));
		};

		self.ux.drag = function ($this) {
			if (A.admin.editmode.enabled !== true) return;
			// récupération des coordonnées d'interaction 
			var d = self.ux.getCoords($this);
			switch (d3.event.type) {
				case 'start':
					var $item = A.admin.utils.getParent($this, '.item');
					self.changes.storeOriginal($item);
					self.items.originalpos = d;
					break;
				case 'drag':
					// application des coordonnées
					var o = self.items.originalpos;
					if (d.control.element.classed('selected')) {
						if (self.shiftKeyPressed) {
							if (Math.abs(d.control.dx - o.control.dx) > Math.abs(d.control.dy - o.control.dy)) {
								// horizotal uniquement
								d.control.element.style('top', o.control.dy + 'px').style('left', d.control.dx + 'px');
							} else {
								// vertical uniquement
								d.control.element.style('top', d.control.dy + 'px').style('left', o.control.dx + 'px');
							}
						} else {
							d.control.element.style('top', d.control.dy + 'px').style('left', d.control.dx + 'px');
						}
					}
					break;
				case 'end':
					var $item = A.admin.utils.getParent($this, '.item');
					self.changes.storeState($item);
					self.items.originalpos = null;
					break;
			}
		};

		self.ux.spot = function ($this) {
			// récupération des données d'interaction 
			var d = self.ux.getCoords($this);
			switch (d3.event.type) {
				case 'start':
					var $item = A.admin.utils.getParent($this, '.item');
					self.changes.storeOriginal($item);
					break;
				case 'drag':
					if (d.wrapper.element.classed('selected')) {
						d.control.element.classed('moved', true);

						// limites de déplacement du contenu : on stop quand le bord est atteint
						if (d.content.dx >= 0) {
							d.content.dx = 0;
						}
						if (d.content.dy >= 0) {
							d.content.dy = 0;
						}
						if (d.content.dx <= (d.content.width - d.wrapper.width) * -1) {
							d.content.dx = (d.content.width - d.wrapper.width) * -1;
						}
						if (d.content.dy <= (d.content.height - d.wrapper.height) * -1) {
							d.content.dy = (d.content.height - d.wrapper.height) * -1;
						}

						// application des coordonnées à la poignée
						d3.select($this).style('top', d.control.dy + 'px').style('left', d.control.dx + 'px');

						// conversion des coordonnées en pourcentages
						d.content.dx = d.content.dx * 100 / d.wrapper.width;
						d.content.dy = d.content.dy * 100 / d.wrapper.height;

						// application des coordonnées au contenu
						d.content.element.style('top', d.content.dy + '%').style('left', d.content.dx + '%').attr('data-top', d.content.dy).attr('data-left', d.content.dx);
					}
					break;
				case 'end':
					if (d.control.element.classed('moved')) {
						d.control.element.classed('moved', false);
						d.control.element.transition().duration(100).style("top", d.wrapper.height / 2 + "px").style("left", d.wrapper.width / 2 + "px").transition().duration(0).style("top", '50%').style("left", '50%');
					}
					var $item = A.admin.utils.getParent($this, '.item');
					self.changes.storeState($item);
					break;
			}
		};
		self.ux.moveItem = function ($item, move) {
			self.changes.storeOriginal($item.node());
			if (self.shiftKeyPressed) {
				var factor = 10;
			} else {
				var factor = 1;
			}
			if (A.zoom.pos.z >= 1) {
				var zoomLevel = 1;
			} else {
				var zoomLevel = A.zoom.pos.z;
			}
			var newCoords = {
				'x': parseFloat($item.style('left')) + move['x'] * factor / zoomLevel,
				'y': parseFloat($item.style('top')) + move['y'] * factor / zoomLevel
			};
			$item.style('top', newCoords['y'] + 'px').style('left', newCoords['x'] + 'px');
			self.changes.storeState($item.node());
		};

		self.ux.resize = function ($this) {
			// récupération des coordonnées d'interaction 
			var d = self.ux.getCoords($this, 'sides');
			var $item = A.admin.utils.getParent($this, '.item');

			switch (d3.event.type) {
				case 'start':
					self.changes.storeOriginal($item);
					break;
				case 'drag':
					// si on garde le ratio
					if (self.shiftKeyPressed == false && $($item).hasClass('text') === false) {
						if (d.decalage.x > d.decalage.y) {
							// drag Y
							d.wrapper.newTop = d.wrapper.top + d.pointer.y;
							d.wrapper.newWidth = d.wrapper.newHeight * self.elemRatio;
							if (d.control.element.classed('top left')) {
								d.wrapper.newLeft = d.wrapper.left + (d.wrapper.width - d.wrapper.newWidth);
							}
						} else {
							// drag X
							d.wrapper.newLeft = d.wrapper.left + d.pointer.x;
							d.wrapper.newHeight = d.wrapper.newWidth / self.elemRatio;
							if (d.control.element.classed('top left')) {
								d.wrapper.newTop = d.wrapper.top + (d.wrapper.height - d.wrapper.newHeight);
							}
						}
					}
					d.wrapper.element.style('width', d.wrapper.newWidth + 'px').style('height', d.wrapper.newHeight + 'px').style('top', d.wrapper.newTop + 'px').style('left', d.wrapper.newLeft + 'px');
					break;
				case 'end':
					var $item = A.admin.utils.getParent($this, '.item');
					self.changes.storeState($item);
					break;
			}
		};
		self.ux.adjust_to_text_content = function ($this) {
			var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'bottom';

			var margin_bottom = 14,
			    contentHeight = 0 - margin_bottom;

			$this.select('.text-container').selectAll('p').each(function () {
				contentHeight += parseFloat(d3.select(this).style('height')) + margin_bottom;
			});
			if (direction == 'bottom') {
				var originalHeight = parseFloat($this.style('height')),
				    originalTop = parseFloat($this.style('top')),
				    newTop = originalTop + (originalHeight - contentHeight);
				$this.style('top', newTop + 'px').style('height', contentHeight + 'px');
			} else {
				$this.style('height', contentHeight + 'px');
			}
		};
		self.ux.frame = function ($this) {

			// récupération des coordonnées d'interaction 
			var d = self.ux.getCoords($this, 'sides');
			// blocage du cadre pour ne pas dépasser le contenu 
			var limitX = false,
			    limitY = false;
			if (d.wrapper.newWidth >= d.content.width) {
				d.wrapper.newWidth = d.content.width, d.wrapper.newLeft = d.wrapper.left, limitX = true;
				if (d.control.element.classed('top') || d.control.element.classed('left')) {
					d.wrapper.newLeft = d.wrapper.left + d.wrapper.width - d.content.width;
				}
			}
			if (d.wrapper.newHeight >= d.content.height) {
				d.wrapper.newHeight = d.content.height, d.wrapper.newTop = d.wrapper.top, limitY = true;
				if (d.control.element.classed('top') || d.control.element.classed('left')) {
					d.wrapper.newTop = d.wrapper.top + d.wrapper.height - d.content.height;
				}
			}

			// pour empêcher l'element de se déplacer quand on drag les barres top ou left
			if (d.control.element.classed('top') || d.control.element.classed('left')) {
				d.content.left = d.content.left - d.pointer.x;
				d.content.top = d.content.top - d.pointer.y;
				if (d.content.left > 0) d.content.left = 0;
				if (d.content.top > 0) d.content.top = 0;
			}

			// pour cacher le spot si les limites sont atteintes
			if (limitX == true && limitY == true) {
				d.wrapper.element.classed('limits', true);
			} else {
				d.wrapper.element.classed('limits', false);
			}

			// pour déplacer le contenu si il est hors cadre d'un coté et que la limite n'est pas atteinte
			if (d.control.element.classed('top') || d.control.element.classed('left')) {
				if (d.control.left <= (d.content.width - d.wrapper.width) * -1) {
					d.control.left = (d.content.width - d.wrapper.width) * -1;
				}
				if (d.control.top <= (d.content.height - d.wrapper.height) * -1) {
					d.control.top = (d.content.height - d.wrapper.height) * -1;
				}
			}
			if (d.control.element.classed('bottom') || d.control.element.classed('right')) {
				if (d.wrapper.width >= d.content.width + d.content.left) {
					d.content.left = d.wrapper.width - d.content.width;
				}
				if (d.wrapper.height >= d.content.height + d.content.top) {
					d.content.top = d.wrapper.height - d.content.height;
				}
			}

			// actualisation du cadre
			d.wrapper.element.style('width', d.wrapper.newWidth + 'px').style('height', d.wrapper.newHeight + 'px').style('top', d.wrapper.newTop + 'px').style('left', d.wrapper.newLeft + 'px');

			switch (d3.event.type) {
				case 'start':
					var $item = A.admin.utils.getParent($this, '.item');
					self.changes.storeOriginal($item);
					break;
				case 'drag':
					// application des coordonnées
					d.content.element.style('top', d.content.top + 'px').style('left', d.content.left + 'px').style('height', d.content.height + 'px').style('width', d.content.width + 'px');
					break;
				case 'end':
					// calcule en % et on actualisation de l'élément
					d.content.left = d.content.left * 100 / d.wrapper.newWidth;
					d.content.top = d.content.top * 100 / d.wrapper.newHeight;
					d.content.width = d.content.width * 100 / d.wrapper.newWidth;
					d.content.height = d.content.height * 100 / d.wrapper.newHeight;

					d.content.element.style('top', d.content.top + '%').style('left', d.content.left + '%').style('height', d.content.height + '%').style('width', d.content.width + '%').attr('data-top', d.control.top).attr('data-left', d.control.left).attr('data-height', d.content.height).attr('data-width', d.content.width);

					self.elemRatio = parseFloat(d.wrapper.element.style('width')) / parseFloat(d.wrapper.element.style('height'));

					var $item = A.admin.utils.getParent($this, '.item');
					self.changes.storeState($item);
					break;
			}
		};

		// ajout d'élémént depuis la médiathèque
		self.ux.dragMedia = function ($media) {
			if (self.items.selected) {
				// a debuger -> quand multiple items draggés à la suite
				self.items.unselect();
			}

			var viewportOffset = A.admin.utils.getAbsolutePosition($media);
			var top = viewportOffset.top,
			    left = viewportOffset.left;
			var scrollY = $('#panel-medias .medias-wrapper').scrollTop();
			var pointer = { 'x': d3.event.x + left, 'y': top + d3.event.y - scrollY };
			var $media = d3.select($media);

			switch (d3.event.type) {
				case 'start':
					self.dom.thumb.select('img').attr('src', $media.attr('data-thumb'));
					self.dom.thumb.style('top', '-1000px').style('left', '-1000px').classed('hidden', false);
					break;
				case 'drag':
					// application des coordonnées au thumb
					var thumbCenter = { 'x': parseFloat(self.dom.thumb.style('width')) / 2, 'y': parseFloat(self.dom.thumb.style('height')) / 2 };
					self.dom.thumb.style('left', pointer.x - thumbCenter.x + 'px').style('top', pointer.y - thumbCenter.y + 'px');
					$media.classed('selected', true);
					if (d3.event.x <= -10) {
						// pour cacher le panel (à débuger)
						// A.table.medias.dom.container.classed('hidden', true);
					}
					break;
				case 'end':
					if (d3.event.x >= -10) {
						// retour à la position originale
						self.dom.thumb.transition().duration(100).style("top", top + 'px').style("left", left + 'px').transition().duration(0).style('top', '-1000px').style('left', '-1000px').on("end", function () {
							self.dom.thumb.classed('hidden', true);
							$media.classed('selected', false);
						});
					} else {
						// add media on table
						self.ux.addMedia($media, pointer);
					}
					break;
			}
		};
		self.ux.addText = function (coords) {
			var $new_item = $(self.templates['element-note-text']);
			$new_item.attr('data-elem', 'text');
			$new_item.attr('data-title', 'Texte');
			self.ux.item_to_table($new_item, coords);
		};
		self.ux.addMedia = function ($media, coords) {
			if (typeof $media !== "undefined") {
				// if not dragged
				if (self.dom.thumb.classed('hidden') == true) {
					self.dom.thumb.select('img').attr('src', $media.attr('data-thumb'));
					self.dom.thumb.style('top', '-1000px').style('left', '-1000px').classed('hidden', false);
				}

				// taille de l'item basée sur le thumb
				var itemRatio = parseFloat($media.attr('data-ratio')),
				    itemWidth = parseFloat(self.dom.thumb.select('img').style('width')),
				    itemHeight = itemWidth / itemRatio;

				var thumbSize = { w: parseFloat(self.dom.thumb.style('width')), h: parseFloat(self.dom.thumb.style('height')) };

				// get from template
				var $new_item = self.ux.media_to_item($media);

				if (typeof coords === "undefined") {
					var center = A.zoom.utils.getCenter();
					var coords = { x: center.x, y: center.y, w: thumbSize.w, h: thumbSize.h };
				}

				// remplissage pour les fiches
				$new_item.attr('data-elem', $media.attr('data-elem'));
				$new_item.attr('data-title', $media.select('h3').text());

				// hide thumb
				$media.classed('selected', false);
				self.dom.thumb.classed('hidden', true).style('top', '-1000px').style('left', '-1000px');

				coords = { x: coords.x - thumbSize.w / 2, y: coords.y - thumbSize.h / 2, w: itemWidth, h: itemHeight };

				// add to table
				self.ux.item_to_table($new_item, coords);
			}
		};
		self.ux.media_to_item = function ($media) {
			var template = $media.attr('data-template');
			var $new_item = $(self.templates[template]);
			var $content = $new_item.find('.hold');

			switch (template) {
				case 'element-image':
					$content.attr('src', $media.attr('data-full'));
					break;
				case 'element-video':
					$content.append('<div class="placeholder"><img style="background:url(' + $media.attr('data-full') + ') no-repeat center center;"></div>');
					$new_item.find('.video-player').addClass($media.attr('data-type')).attr('data-video_id', $media.attr('data-video-id'));
					break;
				case 'element-audio':
					$content.find('audio').attr('src', $media.attr('data-file'));
					break;
				default:
					break;
			}
			return $new_item;
		};
		self.ux.item_to_table = function ($new_item, coords) {

			var coords = A.zoom.utils.screenToTableSquare(coords.x, coords.y, coords.w, coords.h);
			//newcoords = A.zoom.utils.screenToTableSquare(coords.x, coords.y);
			// convertir x y avec zoom (ou pas?)

			//x:center.x-item.w/2, y:center.y-item.h/2,
			//var center = A.zoom.utils.getCenter();

			self.items.new = $new_item;
			self.items.new.css('width', coords.w).css('height', coords.h).css('left', coords.x).css('top', coords.y);
			self.items.new.find('.hold').css('width', '100%').css('height', '100%').css('top', '0%').css('left', '0%');

			self.items.new.appendTo(A.zoom.dom.wrapper.node());

			self.items.get();
			self.items.click(d3.select(self.items.new.get(0)));
			self.items.select(d3.select(self.items.new.get(0)));

			// save
			var $item = A.admin.utils.getParent(self.items.new.get(0), '.item');
			self.changes.storeOriginal($item, false);
			self.changes.storeState($item);
		};
		self.ux.getCoords = function ($this, params) {
			if (typeof params == 'undefined') params = [];
			var d = {};

			// enveloppe de l'élément ciblé
			d['wrapper'] = {};
			d['wrapper']['element'] = d3.select(A.admin.utils.getParent($this, '.item'));
			d['wrapper']['width'] = parseFloat(d.wrapper.element.style('width'));
			d['wrapper']['height'] = parseFloat(d.wrapper.element.style('height'));
			d['wrapper']['left'] = parseFloat(d.wrapper.element.style('left'));
			d['wrapper']['top'] = parseFloat(d.wrapper.element.style('top'));

			// contenu de l'élément ciblé
			d['content'] = {};
			d['content']['element'] = d.wrapper.element.select('.hold');
			d['content']['left'] = parseFloat(d.content.element.style('left'));
			d['content']['top'] = parseFloat(d.content.element.style('top'));
			d['content']['width'] = parseFloat(d.content.element.style('width'));
			d['content']['height'] = parseFloat(d.content.element.style('height'));

			// élément ciblé par le click (poignée ou élément draggé)
			d['control'] = {};
			d['control']['element'] = d3.select($this);
			d['control']['left'] = parseFloat(d.control.element.style('left'));
			d['control']['top'] = parseFloat(d.control.element.style('top'));

			// pointeur de la souris (si souris il y a)
			if (d3.event) {
				d['pointer'] = {};
				d['pointer']['x'] = Math.round(d3.event.x / A.zoom.pos.z);
				d['pointer']['y'] = Math.round(d3.event.y / A.zoom.pos.z);
				d['pointer']['dx'] = Math.round(d3.event.dx / A.zoom.pos.z);
				d['pointer']['dy'] = Math.round(d3.event.dy / A.zoom.pos.z);

				d['content']['dx'] = d.content.left + d.pointer.dx;
				d['content']['dy'] = d.content.top + d.pointer.dy;

				d['control']['x'] = d.control.left + d.pointer.x, d['control']['y'] = d.control.top + d.pointer.y, d['control']['dx'] = d.control.left + d.pointer.dx, d['control']['dy'] = d.control.top + d.pointer.dy;
			}

			// 
			if (params == 'sides') {
				d['decalage'] = { 'x': d.wrapper.width, 'y': d.wrapper.height }, d['compensation'] = { 'x': 0, 'y': 0 };

				var $el = d.control.element;
				if ($el.classed('top')) {
					d.decalage.y = d.pointer.y * -1;d.compensation.y = d.wrapper.height;
				}
				if ($el.classed('left')) {
					d.decalage.x = d.pointer.x * -1;d.compensation.x = d.wrapper.width;
				}
				if ($el.classed('bottom')) {
					d.decalage.y = d.pointer.y;d.compensation.y = 0;d.pointer.y = 0;
				}
				if ($el.classed('right')) {
					d.decalage.x = d.pointer.x;d.compensation.x = 0;d.pointer.x = 0;
				}

				// si on tient un bord
				if (($el.classed('top') || $el.classed('bottom')) == true && ($el.classed('left') || $el.classed('right')) == false) {
					d.pointer.x = 0;
				}
				if (($el.classed('top') || $el.classed('bottom')) == false && ($el.classed('left') || $el.classed('right')) == true) {
					d.pointer.y = 0;
				}

				d['wrapper']['newHeight'] = d.decalage.y + d.compensation.y;
				d['wrapper']['newWidth'] = d.decalage.x + d.compensation.x;
				d['wrapper']['newTop'] = d.wrapper.top + d.pointer.y;
				d['wrapper']['newLeft'] = d.wrapper.left + d.pointer.x;
			}
			return d;
		};
	}

};
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function Medias() {
	this.init();
};
Medias.prototype = {
	init: function init() {
		var self = this;
		self.dom = {
			container: d3.select("#panel-medias"),
			wrapper: d3.select("ul#medias"),
			elements: d3.select("ul#medias").selectAll('li.media'),
			modals: $("#editor-modals .modal")
		};
		self.btn = {
			open: d3.select("#medias-open"),
			close: d3.select("#medias-close"),
			create: {
				image: d3.select("#medias-create ul.dropdown-menu a.create-image"),
				video: d3.select("#medias-create ul.dropdown-menu a.create-video"),
				audio: d3.select("#medias-create ul.dropdown-menu a.create-audio")
			},
			update: d3.select("#medias-update"),
			delete: self.dom.container.selectAll(".media-delete")
		};
		self.opened = self.dom.container.classed('hidden') ? false : true;
		self.enableControls();
		self.enableFiche();
	},
	enable: function enable() {
		if (A.table.enabledTool) A.table.enabledTool.disable();
		A.table.enabledTool = self;
		var self = this;
		self.opened = true;
		self.dom.container.classed('hidden', false);
		A.admin.utils.hideButtons();
	},
	disable: function disable() {
		A.table.enabledTool = null;
		A.admin.utils.showButtons();
		var self = this;
		self.opened = false;
		self.dom.container.classed('hidden', true);
	},
	enableFiche: function enableFiche() {
		var self = this;
		$(document).ready(function () {
			A.table.editor.fiches.medias = {
				dom: d3.select("#fiche-medias"),
				open: function open() {
					this.dom.select('.fiche-title').html(A.table.editor.items.clicked.attr('data-title'));
					this.dom.classed('hidden', false);
				},
				close: function close() {
					this.dom.select('.fiche-title').html('');
					this.dom.classed('hidden', true);
				},
				refresh: function refresh() {
					var that = this;
					// do nothing
					return;
				}
			};
		});
	},
	enableControls: function enableControls() {
		var self = this;
		self.fileUpload = {};
		self.fileUpload.reset = function () {
			self.fileUpload.file = null;
			self.fileUpload.fileName = null;
		};
		self.btn.delete.on('click', function () {
			var element = $(this).closest('li.media');
			var uid = element.data('elem');
			self.delete(uid, element);
		});
		self.btn.update.on('click', function () {
			self.update();
		});
		self.btn.open.on('click', function (e) {
			self.enable();
		});
		self.btn.close.on('click', function () {
			self.disable();
		});
		self.dom.elements.select('.thumb').call(d3.drag().on("start drag end", function () {
			A.table.editor.ux.dragMedia(A.admin.utils.getParent(this, 'li.media'));
		}));
		self.dom.elements.select('button.add-media').on("click", function () {
			A.table.editor.ux.addMedia(d3.select(A.admin.utils.getParent(this, 'li.media')));
			$(this).blur(); // pour empêcher le double appel si on utilise le clavier
		});
		self.btn.create.image.on('click', function (e) {
			// launch modal
			self.enableFileUpload('image');
		});
		self.btn.create.video.on('click', function (e) {
			// launch modal
			self.enableUrl();
		});
		self.btn.create.audio.on('click', function (e) {
			// launch modal
			self.enableFileUpload('audio');
		});
	},
	enableFileUpload: function enableFileUpload(type) {
		var self = this;
		self.uploader = {
			'type': type
		};
		self.uploader.wrapper = $('#create-media-' + type + '.modal');
		self.uploader.form = self.uploader.wrapper.find('form.fileupload');
		self.uploader.progress = {
			container: self.uploader.form.find('.progress'),
			bar: self.uploader.form.find('.progress-bar'),
			title: self.uploader.form.find('.progress-details .title'),
			value: self.uploader.form.find('.progress-details .value')
		};
		self.uploader.input = {
			'file': self.uploader.form.find('.file-input'),
			'title': self.uploader.form.find('.title-input'),
			'text': self.uploader.form.find('.text-input')
		};
		self.uploader.container = self.uploader.form.find('.preview-container');
		self.uploader.label = self.uploader.container.find('h5.title');
		self.uploader.preview = self.uploader.container.find('.preview');
		self.uploader.btn = {
			remove: self.uploader.container.find('.button.remove')
		};
		self.uploader.reveal = function (preview_content) {
			self.uploader.preview.html(preview_content).promise().done(function () {
				self.uploader.label.text(self.uploader.fileName);
				self.uploader.input.title.val(self.uploader.fileName);
				self.uploader.container.removeClass('hidden');
			});
		};
		self.uploader.flush = function (exceptions) {
			if (typeof exceptions === 'undefined') {
				exceptions = [];
			}
			self.uploader.container.addClass('hidden');
			self.uploader.label.html('');
			self.uploader.preview.html('');
			self.uploader.progress.bar.css('width', '0');
			self.uploader.progress.value.text('0%');
			self.uploader.progress.container.addClass('hidden');
			$.each(self.uploader.input, function (key, $input) {
				if (exceptions.indexOf(key) <= -1) {
					self.input_clean($input);
				} else {
					$input.closest('.form-group').addClass('has-error');
				}
			});
		};
		self.uploader.input.file.on('change', function (e) {
			self.uploader.file = this.files[0];
			self.uploader.fileName = e.target.value.split('\\').pop();
			if (self.uploader.fileName && self.uploader.file) {
				if (self.uploader.file.type.match('image.*')) {
					// http://stackoverflow.com/questions/4459379/preview-an-image-before-it-is-uploaded
					var reader_image = new FileReader();
					reader_image.onload = function (e) {
						self.uploader.reveal('<img src="' + e.target.result + '">');
					};
					reader_image.readAsDataURL(this.files[0]);
				}
				if (self.uploader.file.type.match('audio.*')) {
					var reader_audio = new FileReader();
					reader_audio.onload = function (e) {
						var player = document.createElement("audio");
						player.src = e.target.result;
						player.setAttribute("type", self.uploader.file.type);
						player.setAttribute("controls", "controls");
						self.uploader.reveal(player);
					};
					reader_audio.readAsDataURL(this.files[0]);
				}
				if (self.uploader.file.type.match('application/pdf') || self.uploader.file.name.match('\.pdf')) {
					self.uploader.reveal('<span class="gros fichier pdf">PDF</span>');
				}
				if (self.uploader.file.type.match('application/msword') || self.uploader.file.type.match('application\/.*officedocument') || self.uploader.file.name.match('\.doc')) {
					self.uploader.reveal('<span class="gros fichier doc">DOC</span>');
				}
			} else {
				self.uploader.flush();
			}
		});
		self.uploader.btn.remove.on('click', function (e) {
			e.stopPropagation();
			e.preventDefault();
			self.uploader.flush();
		});
		self.uploader.fileupload = self.uploader.input.file.fileupload({
			autoUpload: false,
			dataType: 'json',
			add: function add(e, data) {
				var $form = $(this).closest('form'),
				    $submitButton = $form.find('input[type="submit"]');
				data.url = A.url + '/upload';
				data.formData = {
					'action': 'create',
					'template': self.uploader.type,
					'element': '',
					'filename': data.files[0].name,
					'title': self.uploader.input.title.val(),
					'text': self.uploader.input.text.val()
				};
				self.fileReady = data;
				self.modalOpen = $form.closest('.modal');
				$form.on('submit', function (e, data) {
					e.preventDefault();
					self.upload();
				});
			},
			always: function always(e, data) {
				/*
    console.log('ok!!!!');
    console.log(data.result);
    console.log(data.textStatus);
    console.log(data.jqXHR);
    */
			},
			done: function done(e, data) {
				$.each(data.result.files, function (index, file) {
					if (self.modalOpen) {
						self.modalOpen.modal('hide');
						self.modalOpen = null;
					}
					self.uploader.flush();
					var $media = $(file.html);
					$media.hide();
					$(self.dom.wrapper.node()).prepend($media);
					$media.slideDown(200, function () {
						self.update();
					});
					// prepend elem
				});
			},
			progressall: function progressall(e, data) {
				var progress = parseInt(data.loaded / data.total * 100, 10);
				self.uploader.progress.bar.css('width', progress + '%');
				self.uploader.progress.value.text(progress + '%');
			}
		}).prop('disabled', !$.support.fileInput).parent().addClass($.support.fileInput ? undefined : 'disabled');
	},
	enableUrl: function enableUrl() {
		var self = this;
		self.embeder = {};
		self.embeder.input = {
			'link': $('#video-url-input'),
			'title': $('#video-title-input'),
			'text': $('#video-text-input')
		};
		self.embeder.form = self.embeder.input.link.closest('form');
		self.embeder.container = self.embeder.form.find('.preview-container');
		self.embeder.preview = self.embeder.container.find('.preview');
		self.embeder.btn = {
			remove: self.embeder.container.find('.button.remove')
		};
		self.modalOpen = self.embeder.form.closest('.modal');
		self.embeder.reveal = function (datas) {
			//var htmlContent = '<img src="'+datas.thumb_hd+'">';
			var htmlContent = self.createVideo(datas);
			self.embeder.preview.html(htmlContent).promise().done(function () {
				self.embeder.input.title.val(datas.title);
				self.embeder.input.text.val(datas.text);
				self.embeder.container.removeClass('hidden');
			});
			self.embeder.datas = datas;
		};
		self.embeder.flush = function (exceptions) {
			if (typeof exceptions === 'undefined') {
				exceptions = [];
			}
			self.embeder.container.addClass('hidden');
			self.embeder.preview.html('');
			$.each(self.embeder.input, function (key, $input) {
				if (exceptions.indexOf(key) <= -1) {
					self.input_clean($input);
				} else {
					$input.closest('.form-group').addClass('has-error');
				}
			});
		};
		self.embeder.input.link.off().on('input', function (e) {
			self.embeder.url = $(this).val();
			self.embeder.parsedUrl = self.parseVideo(self.embeder.url);
			if (typeof self.embeder.parsedUrl.type !== 'undefined') {
				self.embeder.form.find('.has-error').removeClass('has-error');
				self.getVideoDatas(self.embeder.url, function (data) {
					if (data && (typeof data === "undefined" ? "undefined" : _typeof(data)) === 'object') {
						self.embeder.reveal(data);
					}
				});
			} else {
				self.embeder.flush(['link']);
			}
		});
		self.embeder.btn.remove.on('click', function (e) {
			e.stopPropagation();
			e.preventDefault();
			self.embeder.flush();
		});
		self.embeder.form.on('submit', function (e) {
			e.preventDefault();
			if (self.embeder.form.find('.has-error').length <= 0) {
				A.ajaxCall('create_video', self.embeder.datas, function (data) {
					if (self.modalOpen) {
						self.modalOpen.modal('hide');
						self.modalOpen = null;
					}
					var $media = $(data);
					$media.hide();
					$(self.dom.wrapper.node()).prepend($media);
					$media.slideDown(200, function () {
						self.update();
					});
				});
			}
		});
	},
	upload: function upload() {
		var self = this;
		if (A.admin.editmode.enabled !== true) return;
		if (self.fileReady) {
			// faire plus général
			self.fileReady.submit();
			self.btn.update.classed('updating', true);
			self.fileReady = null;
			self.uploader.progress.container.removeClass('hidden');
		}
	},
	delete: function _delete(uid, $element) {
		var self = this;
		if (A.admin.editmode.enabled !== true) return;
		// demander confirmation
		self.modalOpen = $('#delete-media.modal');
		self.modalOpen.on('click', '.submit', function (e) {
			var datas = {
				'uid': uid
			};
			A.ajaxCall('delete_media', datas, function (data) {
				// callback
				if (self.modalOpen) {
					self.modalOpen.modal('hide');
					self.modalOpen = null;
				}
				if (typeof $element !== 'undefined') {
					$element.slideUp(200, function () {
						$element.remove();
						self.update();
						A.table.update();
					});
				}
			});
		});
	},
	update: function update() {
		var self = this;
		if (A.admin.editmode.enabled !== true) return;
		self.btn.update.classed('updating', true);
		A.ajaxCall('get_medias_list', '', function (data) {
			// version bourrine
			self.dom.wrapper.html(data);
			// faire un comparateur de listes
			self.btn.update.classed('updating', false);
			self.init();
		});
	},
	modal: function modal() {
		var self = this;
		self.modal.reset = function () {};
	},
	input_clean: function input_clean($input) {
		var self = this;
		$input.wrap('<form>').closest('form').get(0).reset();
		$input.unwrap();
	},
	parseVideo: function parseVideo(url) {
		url.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);
		if (RegExp.$3.indexOf('youtu') > -1) {
			var type = 'youtube';
		} else if (RegExp.$3.indexOf('vimeo') > -1) {
			var type = 'vimeo';
		}
		return {
			type: type,
			id: RegExp.$6
		};
	},
	createVideo: function createVideo(datas) {
		var self = this;
		// Returns an iframe of the video with the specified URL.
		var $iframe = $('<iframe>', {
			width: datas.width,
			height: datas.width / datas.ratio
		});
		$iframe.attr('frameborder', 0);
		if (datas.type == 'youtube') {
			$iframe.attr('src', '//www.youtube.com/embed/' + datas.video_id);
		} else if (datas.type == 'vimeo') {
			$iframe.attr('src', '//player.vimeo.com/video/' + datas.video_id);
		}
		$iframe = $('<div class="new-iframe-wrapper"></div>').css('padding-top', 100 / datas.ratio + '%').html($iframe);
		return $iframe;
	},
	getVideoDatas: function getVideoDatas(url, callback) {
		var self = this;
		// Obtains the video's thumbnail and passed it back to a callback function.
		var videoObj = self.parseVideo(url);
		if (videoObj.type == 'youtube') {
			var apiKey = 'AIzaSyCtF6YnkF0LrdcboqgRWUc0zq4vHzC3Gx4';
			$.get('https://www.googleapis.com/youtube/v3/videos?id=' + videoObj.id + '&key=' + apiKey + ' &fields=items(id,snippet(title,thumbnails,description))&part=snippet', function (data) {
				data = data.items[0];
				var thumb = data.snippet.thumbnails;
				if (typeof data !== "undefined") {
					callback({
						'title': data.snippet.title,
						'type': videoObj.type,
						'video_id': data.id,
						'video_url': url,
						'text': $('<div>' + data.snippet.description + '</div>').text(),
						'thumb_hd': thumb.maxres ? thumb.maxres.url : thumb.high.url,
						'thumb_sd': data.snippet.thumbnails.medium.url,
						'ratio': 16 / 9
					});
				} else {
					self.embeder.flush(['link']);
				}
			}).fail(function () {
				self.embeder.flush(['link']);
			});
		} else if (videoObj.type == 'vimeo') {

			$.get('http://vimeo.com/api/v2/video/' + videoObj.id + '.json', function (data) {
				data = data[0];
				if (typeof data !== "undefined") {
					callback({
						'title': data.title,
						'type': videoObj.type,
						'video_id': data.id,
						'video_url': data.url,
						'text': $('<div>' + data.description + '</div>').text(),
						'thumb_hd': data.thumbnail_large,
						'thumb_sd': data.thumbnail_large, // thumbnail_medium
						'ratio': data.width / data.height
					});
				} else {
					self.embeder.flush(['link']);
				}
			}).fail(function () {
				self.embeder.flush(['link']);
			});
		}
	}
};
"use strict";

function Outils() {
	this.init();
};

Outils.prototype = {

	init: function init() {
		var self = this;

		self.btn = {
			text: d3.select("#outil-text-button"),
			arrow: d3.select("#outil-arrow-button")
		};
		self.enableText();
		self.enableArrow();
		self.enableControls();
	},
	enableControls: function enableControls() {
		var self = this;

		self.btn.text.on('click', function (e) {
			if (self.btn.text.classed('enabled')) {
				self.text.disable(self.btn.text);
			} else {
				self.text.enable(self.btn.text);
			}
		});

		self.btn.arrow.on('click', function (e) {
			if (self.btn.arrow.classed('enabled')) {
				self.arrow.disable(self.btn.arrow);
			} else {
				self.arrow.enable(self.btn.arrow);
			}
		});
	},
	enableText: function enableText() {
		var self = this;
		self.text = {};
		self.text.enabled = false;
		$(document).ready(function ($) {
			self.text.enableFiche();
			self.text.enableSelection();
		});

		self.text.enable = function () {
			if (A.table.enabledTool) A.table.enabledTool.disable();
			A.table.enabledTool = self.text;
			A.zoom.dom.container.classed('selection-mode', true);
			A.zoom.actions.disableDrag();
			self.btn.text.classed('enabled', true);
			var callback = function callback(coords) {
				A.table.editor.ux.addText(coords);
				self.text.disable();
			};
			var element = A.zoom.dom.container.append('div').classed('selection-frame', true);
			self.selection.enable(element, callback);
			self.text.enabled = true;
		};
		self.text.disable = function () {
			A.table.enabledTool = null;
			self.selection.disable();
			self.btn.text.classed('enabled', false);
			A.zoom.dom.container.classed('selection-mode', false);
			A.zoom.actions.reset();
			self.text.enabled = false;
		};
		self.text.enableFiche = function () {
			$(document).ready(function () {
				A.table.editor.fiches.text = {
					dom: d3.select("#fiche-text"),
					hasChanged: false,
					units: {
						'font-size': 'px',
						'line-height': 'em',
						'padding': 'px',
						'padding-top': 'px',
						'padding-right': 'px',
						'padding-bottom': 'px',
						'padding-left': 'px'
					},
					open: function open() {
						var that = this;
						this.opened = true;
						this.dom.item = A.table.editor.items.clicked;
						this.dom.tabs = $(this.dom.node()).find('ul.tabs li.tab a.btn');
						this.dom.textarea = this.dom.select('textarea');
						this.dom.container = this.dom.item.select('.hold');
						this.dom.form = $(this.dom.node()).find('form');
						this.dom.radioBtn = this.dom.form.find('.radioBtn');
						this.dom.form.find('button').on('click', function (e) {
							e.preventDefault();
						});
						this.texte = that.dom.container.attr('data-content');
						this.simplemde = new SimpleMDE({
							element: this.dom.textarea.node(),
							hideIcons: ["image", "preview", "side-by-side", "fullscreen"],
							status: false,
							forceSync: true,
							indentWithTabs: false,
							placeholder: 'Votre texte ici',
							spellChecker: false,
							initialValue: this.texte
						});

						this.dom.tabs.click(function (e) {
							e.preventDefault();
							$(this).tab('show');
							that.refresh();
						});

						// set fiche apparences
						that.setStyle();

						// fiche interaction
						this.dom.select('.fiche-title').html('Annotation');
						this.dom.classed('hidden', false);
						if (this.dom.form.length > 0) {
							this.dom.form.on('input change', 'input, textarea, button', function (e) {
								that.getFormData();
							}).on('change', 'select', function (e) {
								that.getFormData();
							});
							this.simplemde.codemirror.on("change", function () {
								that.getFormData();
							});
						}

						this.dom.radioBtn.on('click', 'button', function () {
							var value = $(this).data('title');
							var target = $(this).data('toggle');
							var input = $(this).closest('.radioBtn').parent().find('input.radioInput');
							that.setRadio(input, target, value);
							that.getFormData();
						});
					},
					setStyle: function setStyle() {
						var that = this;
						// set fiche
						this.dom.form.find('input, select').each(function () {
							var value = that.dom.container.style(this.name);
							switch (this.name) {
								case "line-height":
									value = parseFloat(value.replace('em', '').replace(',', '.'));
									break;
								case "font-family":
									if (value.indexOf(", ") !== -1) {
										value = value.split(", ")[0];
									}
									break;
								case "text-align":
								case "vertical-align":
									that.setRadio($(this), this.name, value);
									break;
								case "color":
								case "background":
								case "background-color":
									value = value;
									break;
								default:
									value = parseFloat(value).toFixed(0);
									break;
							}
							this.value = value;
						});

						// colorpickers
						this.dom.form.find('.colorpicker-component').each(function () {
							$(this).colorpicker({
								container: $(this).find('.input-group-addon'),
								color: $(this).find('input').val()
							});
						});
					},
					setRadio: function setRadio(input, target, value) {
						input.prop('value', value);
						$('button[data-toggle="' + target + '"]').not('[data-title="' + value + '"]').removeClass('active').addClass('notActive');
						$('button[data-toggle="' + target + '"][data-title="' + value + '"]').removeClass('notActive').addClass('active');
					},
					close: function close() {
						this.dom.select('.fiche-title').html('');
						this.dom.select('form.form').classed('hidden', true);
						this.simplemde.toTextArea();
						this.simplemde = null;
						this.dom.textarea.property('value', '');
						this.dom.classed('hidden', true);
						this.dom.form.find('.colorpicker-component').each(function () {
							$(this).colorpicker('hide');
							$(this).colorpicker('destroy');
						});
					},
					refresh: function refresh() {
						var that = this;
						// simplemde "empty until focused" bugfix
						this.dom.select('form.form').classed('hidden', false);
						setTimeout(function () {
							that.simplemde.codemirror.refresh();
						}, 0);
					},
					// update table
					getFormData: function getFormData() {
						var that = this;
						this.storeOriginal();
						var datas = that.dom.form.serializeArray(),
						    formated_data = { styles: '', content: '' };
						$.each(datas, function () {
							switch (this.name) {
								case "text":
									if (that.simplemde) {
										var html = that.simplemde.options.previewRender(this.value);
										that.dom.container.select('.text-container').html(html);
										that.dom.container.attr('data-content', this.value);
										formated_data.content = this.value;
									}
									break;
								case "font-family":
									if (this.value.indexOf(", ") !== -1) {
										this.value = this.value.split(", ")[0];
									}
									that.dom.container.style(this.name, this.value);
									formated_data.styles += this.name + ':' + this.value + ';';
									break;
								default:
									var unit = this.name in that.units ? that.units[this.name] : '';
									that.dom.container.style(this.name, this.value + unit);
									formated_data.styles += this.name + ':' + this.value + unit + ';';
									break;
							}
						});
						A.table.editor.changes.storeState(this.dom.item.node());
						return formated_data;
					},
					storeOriginal: function storeOriginal() {
						var that = this;
						if (this.hasChanged == false) {
							A.table.editor.changes.storeOriginal(this.dom.item.node());
							this.hasChanged = true;
						}
					}

				};
			});
		};
		self.text.enableSelection = function () {
			self.selection = { start: false };
			self.selection.enable = function (element, callback) {
				var origin = null,
				    prev = null;
				A.zoom.dom.container.on("mousedown", function () {
					if (self.selection.frame) self.selection.frame.remove();
					origin = { x: d3.mouse(this)[0], y: d3.mouse(this)[1] };
					prev = origin;
					self.selection.exists = true;
					self.selection.frame = element;
					self.selection.frame.style('left', origin.x + 'px').style('top', origin.y + 'px');
				}).on("mousemove", function () {
					if (self.selection.exists) {
						var p = { x: d3.mouse(this)[0], y: d3.mouse(this)[1] };
						var el = {
							x: parseFloat(self.selection.frame.style('left')),
							y: parseFloat(self.selection.frame.style('top')),
							w: parseFloat(self.selection.frame.style('width')),
							h: parseFloat(self.selection.frame.style('height'))
						};
						var d = {
							x: p.x < el.x + el.w && p.x > prev.x || p.x <= el.x ? p.x : origin.x,
							y: p.y < el.y + el.h && p.y > prev.y || p.y <= el.y ? p.y : origin.y,
							w: p.x < el.x || p.x < el.x + el.w && p.x > prev.x ? origin.x - p.x : p.x - origin.x,
							h: p.y < el.y || p.y < el.y + el.h && p.y > prev.y ? origin.y - p.y : p.y - origin.y
						};
						prev = p;
						self.selection.frame.style('left', d.x + 'px').style('top', d.y + 'px').style('width', d.w + 'px').style('height', d.h + 'px');
					}
				}).on("mouseup", function () {
					if (self.selection.exists) {
						var coords = {
							x: parseFloat(self.selection.frame.style('left')),
							y: parseFloat(self.selection.frame.style('top')),
							w: parseFloat(self.selection.frame.style('width')),
							h: parseFloat(self.selection.frame.style('height'))
						};
						if (typeof callback !== "undefined") callback(coords);
						self.selection.remove();
					}
				});
			};
			self.selection.remove = function () {
				if (self.selection.exists) {
					self.selection.frame.remove();
					self.selection.exists = false;
				}
			};
			self.selection.disable = function () {
				A.zoom.dom.container.on("mousedown", null).on("mousemove", null).on("mouseup", null);
			};
		};
	},

	enableArrow: function enableArrow() {
		var self = this;
		self.arrow = {};
		$(document).ready(function () {
			self.arrow.enableFiche();
		});
		self.arrow.enable = function () {
			if (A.table.enabledTool) A.table.enabledTool.disable();
			A.zoom.actions.disableDrag();
			A.table.enabledTool = self.arrow;
			A.zoom.dom.container.classed('selection-mode', true);
			self.btn.arrow.classed('enabled', true);
			self.arrow.enabled = true;
			var clicked = false;

			A.zoom.dom.container.on("mousedown touchstart", function () {
				if (clicked == true) {
					self.arrow.mouseup(d3.mouse(this));
				} else {
					self.arrow.mousedown(d3.mouse(this));
				}
			}).on("mousemove touchmove", function () {
				if (clicked == true) {
					self.arrow.mousemove(d3.mouse(this));
				}
			}).on("mouseup touchend", function () {
				self.arrow.mouseup(d3.event.type);
			});

			self.arrow.mousedown = function (mouse) {
				var pos = A.zoom.utils.screenToTable(mouse[0], mouse[1]);
				self.arrow.points = {
					a: A.zoom.dom.wrapper.append('div').classed('point point-a', true),
					b: A.zoom.dom.wrapper.append('div').classed('point point-b', true)
				};
				self.arrow.makepoint(self.arrow.points.a);
				self.arrow.makepoint(self.arrow.points.b);

				var $new_item = $(A.table.editor.templates['element-note-arrow']);
				$new_item.attr('data-elem', 'arrow');
				$new_item.attr('data-title', 'Flèche');
				$new_item.addClass('hidden');

				self.arrow.item = d3.select($new_item.appendTo(A.zoom.dom.wrapper.node()).get(0));
				self.arrow.item.append('div').classed('line', true);

				self.arrow.points.a.style('left', pos.x + 'px').style('top', pos.y + 'px');
				self.arrow.points.b.style('left', pos.x + 'px').style('top', pos.y + 'px');
				clicked = true;
			};

			self.arrow.mousemove = function (mouse) {
				self.arrow.item.classed('hidden', false);
				var pos = A.zoom.utils.screenToTable(mouse[0], mouse[1]);
				self.arrow.points.b.style('left', pos.x + 'px').style('top', pos.y + 'px');
				self.arrow.abconnect(self.arrow.item.node(), self.arrow.points.a.node(), self.arrow.points.b.node());
			};

			self.arrow.mouseup = function (type) {
				// maybe add a wrapper called item
				self.arrow.removePoints();
				self.arrow.points = null;

				if (self.arrow.item.node().offsetWidth < 15) {
					self.arrow.item.remove();
					self.arrow.item = null;
				} else {
					A.table.editor.items.get();
					A.table.editor.items.new = $(self.arrow.item.node());
					A.table.editor.items.click(self.arrow.item);
					A.table.editor.items.select(self.arrow.item);

					A.table.editor.changes.storeOriginal(self.arrow.item.node(), false);
					A.table.editor.changes.storeState(self.arrow.item.node());
					self.arrow.disable();
				}
				clicked = false;
			};
		};
		self.arrow.disable = function () {
			A.table.enabledTool = null;
			A.zoom.dom.container.on("mousedown", null).on("mousemove", null).on("mouseup", null);
			self.btn.arrow.classed('enabled', false);
			A.zoom.dom.container.classed('selection-mode', false);
			A.zoom.actions.reset();
			self.arrow.enabled = false;
		};
		self.arrow.makepoint = function (point) {
			point.append('div').classed('handle', true);
			point.call(d3.drag().on("start drag end", function () {
				self.arrow.drag(this);
			}));
		};
		self.arrow.select = function (item) {
			self.arrow.setup(item);
		};
		self.arrow.removePoints = function () {
			A.zoom.dom.wrapper.selectAll('.point').remove();
			A.zoom.actions.reset();
		};
		self.arrow.setup = function (item) {
			if (typeof item !== "undefined") {
				self.arrow.item = item;
			}
			if (self.arrow.item) {
				var angle = self.arrow.get_rotate(self.arrow.item),
				    rayon = parseFloat(self.arrow.item.style('width'));

				var a_pos = {
					x: parseFloat(self.arrow.item.style('left')),
					y: parseFloat(self.arrow.item.style('top'))
				};
				var b_pos = self.arrow.getbpos([a_pos.x, a_pos.y], angle, rayon);

				self.arrow.points = {
					a: A.zoom.dom.wrapper.append('div').classed('point point-a', true).style('top', a_pos.y + 'px').style('left', a_pos.x + 'px'),
					b: A.zoom.dom.wrapper.append('div').classed('point point-b', true).style('top', b_pos.y + 'px').style('left', b_pos.x + 'px')
				};

				self.arrow.makepoint(self.arrow.points.a);
				self.arrow.makepoint(self.arrow.points.b);
				A.zoom.actions.disableDrag();
			}
		};
		self.arrow.enableFiche = function () {
			var self = this;
			A.table.editor.fiches.arrow = {
				dom: d3.select("#fiche-arrow"),
				open: function open() {
					this.dom.classed('hidden', false);
				},
				close: function close() {
					this.dom.classed('hidden', true);
				},
				refresh: function refresh() {
					var that = this;
					return;
				}
			};
		}, self.arrow.abconnect = function (arrow, cla, clb) {
			// ABConnect, MIT
			// https://gist.github.com/raphaelbastide/157aaee7da6d2b761b2a
			var DEGREES = 180 / Math.PI;
			function draw(arrow, cla, clb, update) {
				var a = cla;
				var b = clb;
				// Remove the requestAnimationFrame if you want the line to be always aligned (e.g. even when scrolling)
				requestAnimationFrame(function () {
					if (update) {
						if (a === null || b === null) {
							aVec = [0, 0];
							bVec = [0, 0];
						} else {
							aVec = elementVect(a);
							bVec = elementVect(b);
						}
					}
					renderLine(arrow, aVec, bVec);
				});
			}
			function elementVect(elt) {
				var rect = elt.getBoundingClientRect();
				var rect = A.zoom.utils.screenToTable(rect.left + rect.width / 2 - 1, rect.bottom - rect.height / 2 + 1);
				return [rect.x, rect.y];
			}
			function renderLine(arrow, vec1, vec2) {
				// lineVec = vec1 - vec2
				var lineVec = [vec1[0] - vec2[0], vec1[1] - vec2[1]];
				// angle = invert lineVec, then get its angle in degrees
				var radangle = Math.atan2(lineVec[1] * -1, lineVec[0] * -1);
				var angle = radangle * DEGREES;
				// length of lineVec
				var length = Math.sqrt(lineVec[0] * lineVec[0] + lineVec[1] * lineVec[1]);
				arrow.style.top = vec1[1] + 'px';
				arrow.style.left = vec1[0] + 'px';
				arrow.style.width = length + 'px';
				arrow.style.transform = 'rotate(' + angle + 'deg)';
			}
			var aVec = null;
			var bVec = null;

			draw(arrow, cla, clb, true);
		};
		self.arrow.drag = function ($this) {
			if (A.admin.editmode.enabled !== true) return;
			// récupération des coordonnées d'interaction 
			var d = A.table.editor.ux.getCoords($this);
			switch (d3.event.type) {
				case 'start':
					A.table.editor.changes.storeOriginal(self.arrow.item.node());
					break;
				case 'drag':
					d3.select($this).style('top', d.control.dy + 'px').style('left', d.control.dx + 'px');
					self.arrow.abconnect(self.arrow.item.node(), self.arrow.points.a.node(), self.arrow.points.b.node());
					break;
				case 'end':
					A.table.editor.changes.storeState(self.arrow.item.node());
					break;
			}
		};
		self.arrow.get_rotate = function (obj) {
			var matrix = obj.style("-webkit-transform") || obj.style("-moz-transform") || obj.style("-ms-transform") || obj.style("-o-transform") || obj.style("transform");

			if (matrix !== 'none') {
				var values = matrix.split('(')[1].split(')')[0].split(',');
				var a = values[0];
				var b = values[1];
				var angle = Math.atan2(b, a);
			} else {
				var angle = 0;
			}
			return angle;
		};
		self.arrow.rad_to_deg = function (angle) {
			return angle * (180 / Math.PI);
		};
		self.arrow.getbpos = function (pos, angle, rayon) {
			var x = rayon * Math.cos(angle);
			var y = rayon * Math.sin(angle);
			return { 'x': pos[0] + x, 'y': pos[1] + y };
		};
	}

};
'use strict';

$(document).ready(function () {

	if (typeof A !== 'undefined') {
		A.logged = true;
		A.admin = new Admin();
	}
});

// controlers : 
/*
- display element
- create element
- move element


*/